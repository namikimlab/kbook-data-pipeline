-- raw (bronze)
create table if not exists public.raw_nl_books (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fetched_at timestamptz not null default now(),
  page_no int,
  source_record jsonb not null,
  rec_hash text generated always as (md5(source_record::text)) stored,
  unique(rec_hash)
);

-- Sync state 
CREATE TABLE public.sync_state (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  job_name TEXT NOT NULL CHECK (job_name IN ('daily_fetch', 'update_check', 'backfill')),
  sync_date DATE,
  run_at TIMESTAMPTZ DEFAULT now()
);

-- AFTER daily ingest completes:
REFRESH MATERIALIZED VIEW CONCURRENTLY public.books_public;

-- Silver 
CREATE MATERIALIZED VIEW public.books_public AS
WITH ranked AS (
  SELECT
    id,
    fetched_at,
    source_record->>'TITLE'                 AS title,
    source_record->>'AUTHOR'                AS author,
    source_record->>'PUBLISHER'             AS publisher,
    regexp_replace(source_record->>'EA_ISBN', '[^0-9]', '', 'g') AS isbn13,
    source_record->>'PUBLISH_PREDATE'       AS publish_predate,
    source_record->>'EBOOK_YN'              AS ebook_yn,
    source_record->>'TITLE_URL'             AS cover_url,
    source_record->>'SUBJECT'               AS subject,               -- 주제 (KDC 대분류)
    source_record->>'BOOK_INTRODUCTION'     AS book_introduction, -- 책소개 URL

    row_number() OVER (
      PARTITION BY regexp_replace(source_record->>'EA_ISBN', '[^0-9]', '', 'g')
      ORDER BY fetched_at DESC, id DESC
    ) AS rn
  FROM public.raw_nl_books
)
SELECT *
FROM ranked
WHERE rn = 1
  AND isbn13 ~ '^[0-9]{13}$';